{"version":3,"sources":["redux/asyncReducers.ts","redux/formSlice.tsx","components/Form/validator.tsx","components/Loader/index.tsx","components/Form/index.tsx","redux/appSlice.ts","components/Alert/ErrorAlert.tsx","components/Alert/ConfirmAlert.tsx","redux/gameSlice/utils.ts","redux/gameSlice/index.ts","redux/onlineUsersSlice.ts","redux/statisticsSlice.ts","webSockets/index.ts","components/Alert/index.tsx","redux/homeSlice.ts","components/HomePage/UserList/User.tsx","components/HomePage/UserList/index.tsx","components/HomePage/index.tsx","components/ProfilePage/index.tsx","components/Game/Statistic.tsx","components/Game/Square.tsx","components/Game/Field.tsx","components/Game/Letter.tsx","components/Game/index.tsx","App.tsx","index.tsx"],"names":["sendData","createAsyncThunk","a","email","password","signUp","axios","post","res","data","error","definedError","Error","getUserData","id","get","checkWord","word","lastStep","letter","formattedWord","slice","toUpperCase","toLowerCase","errTexts","initialState","showPassword","emailErr","passwordErr","emailErrText","passwordErrText","loading","setEmailError","state","variant","formSlice","createSlice","name","reducers","changeField","payload","field","value","showPass","setError","err","setLoading","extraReducers","builder","addCase","fulfilled","notAvailableEmail","notRegisteredEmail","incorrectPassword","actions","validator","pass","valid","test","every","rule","Loader","type","width","height","color","Form","dispatch","useDispatch","useSelector","form","onChangeEmail","useCallback","e","target","onChangePass","onChangeShowPass","checker","condition","submitForm","preventDefault","validEmail","validPassword","className","onSubmit","TextField","onChange","label","helperText","FormControlLabel","control","Checkbox","checked","Button","to","onError","alert","alertType","appSlice","isSignIn","game","setAlert","forInvite","gameEndText","setSignIn","window","localStorage","token","setGame","rejected","setItem","ErrorAlert","hideAlert","customText","Alert","severity","action","IconButton","aria-label","size","onClick","fontSize","InviteAlert","children","accept","decline","acceptFn","declineFn","noChoice","INITIAL_WORD","fillSquares","_","fill","Array","map","i","index","uuidv4","active","split","dropStatistic","squares","myTurn","players","isGameEnd","currentWord","itemWithLastLetter","selectedItems","activeButton","reset","forEach","currentActive","checkGameEnd","removeLastLetter","gameSlice","setDrop","setActive","errorText","arr","argId","findIndex","Boolean","findNeighbour","last","isNeighbourLastLetter","push","length","pop","indexOf","resetWord","setLetter","setTurn","turn","setRepeatError","setPlayers","killGame","onlineUsersSlice","onlineUsers","addOnlineUser","removeOnlineUser","splice","statisticsSlice","score","my","opponent","words","setStatictics","player","isMy","socket","emit","io","initializeSocket","on","store","room","player1","player2","AlertMessage","useState","home","app","declinerEmail","closeAlert","clickOutOfAlert","useEffect","onAcceptInvite","onDeclineInvite","onKillGame","getContent","ConfirmAlert","str","onTransitionEnd","homeSlice","signOut","User","receiver","wait","setWait","invite","UserList","HomePage","getItem","ProfilePage","removeUserData","StatisticsList","right","filter","Statistic","statistics","dropDownStatistic","Square","toggleActive","Field","square","Letter","getAlphabet","alphabet","String","fromCodePoint","Game","check","win","draw","App","path","exact","configureStore","reducer","combineReducers","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.40ffd18c.chunk.js","sourcesContent":["import { createAsyncThunk } from '@reduxjs/toolkit'\nimport axios from 'axios'\n\nconst API_BASE = ''\n\ninterface SendDataParams { \n    email: string, password: string, signUp?: boolean,\n}\n\nexport const sendData = createAsyncThunk(\n    'sendDataStatus',\n    async ({ email, password, signUp, }: SendDataParams) => {\n        const res = await axios.post(`${API_BASE}/login-form`, { email, password, signUp, })\n\n        if (res.data.error) {\n            if (res.data.definedError) {\n                return res.data\n            }\n\n            throw new Error('DBError')\n        }\n\n        return res.data\n    }\n)\n\nexport interface SendDataPayload {\n    payload: {\n        error?: boolean,\n        notAvailableEmail?: boolean,\n        incorrectPassword?: boolean,\n        notRegisteredEmail?: boolean,\n        token?: string,\n    }\n}\n\nexport const getUserData = createAsyncThunk(\n    'getUserDataStatus',\n    async (id: string) => {\n        const res = await axios.get(`${API_BASE}/get-user/${id}`)\n\n        if (res.data.error) {\n            throw new Error('DBError')\n        }\n\n        return res.data\n    }\n)\n\nexport interface GetUserDataPayload {\n    payload: {\n        email: string,\n        token: string,\n    }\n}\n\ninterface CheckWordParams {\n    word: string, lastStep: number, letter: string,\n}\n\nexport const checkWord = createAsyncThunk(\n    'checkWordStatus',\n    async ({ word, lastStep, letter, }: CheckWordParams) => {\n        const formattedWord = word.slice(0, 1).toUpperCase() + word.slice(1).toLowerCase()\n\n        const res = await axios.get(\n            `https://en.wikipedia.org/w/api.php?&origin=*&action=opensearch&search=${formattedWord}`\n        )\n        \n        return res.data[1][0] === formattedWord ? {\n            word: res.data[0],\n            lastStep,\n            letter\n        } : false\n    }\n)","import { createSlice } from '@reduxjs/toolkit'\nimport { sendData, SendDataPayload } from './asyncReducers'\n\nconst errTexts = {\n    email: [\n        'Email is not valid', 'This email has already taken. Please use another one.',\n        'There is not user with this email',\n    ],\n    password: [\n        'Password must contains lower case letter and number. Password length must be at least 8 characters', \n        'Password is incorrect',\n    ],\n}\n\nexport interface FormSliceState {\n    email: string,\n    password: string,\n    showPassword: boolean,\n    emailErr: boolean,\n    passwordErr: boolean,\n    emailErrText: string,\n    passwordErrText: string,\n    loading: boolean,\n}\n\nconst initialState: FormSliceState = {\n    email: '',\n    password: '',\n    showPassword: false,\n    emailErr: false,\n    passwordErr: false,\n    emailErrText: errTexts.email[0],\n    passwordErrText: errTexts.password[0],\n    loading: false,\n}\n\ninterface ChangeFieldPayload {\n    payload: {\n        field: 'email' | 'password',\n        value: string,\n    },\n}\n\ninterface SetErrorPayload {\n    payload: {\n        field: 'emailErr' | 'passwordErr',\n        err: boolean,\n    },\n}\n\nconst setEmailError = (state: FormSliceState, variant: 0 | 1 | 2) => {\n    state.emailErr = true\n    state.emailErrText = errTexts.email[variant]\n}\n\nconst formSlice = createSlice({\n    name: 'form',\n    initialState,\n    reducers: {\n        changeField: (state, { payload }: ChangeFieldPayload) => {\n            state[payload.field] = payload.value\n        },\n        showPass: state => {\n            state.showPassword = !state.showPassword\n        },\n        setError: (state, { payload }: SetErrorPayload) => {\n            state[payload.field] = payload.err\n\n            state.emailErrText = errTexts.email[0]\n            state.passwordErrText = errTexts.password[0]\n        },\n        setLoading: (state, { payload }) => {\n            state.loading = payload\n        },\n    },\n    extraReducers: builder => {\n        builder\n            .addCase(sendData.fulfilled, (state, { payload }: SendDataPayload) => {\n                state.loading = false\n                \n                if (payload.error) {\n                    if (payload.notAvailableEmail) {\n                        setEmailError(state, 1)\n                    }\n\n                    if (payload.notRegisteredEmail) {\n                        setEmailError(state, 2)\n                    }\n\n                    if (payload.incorrectPassword) {\n                        state.passwordErr = true\n                        state.passwordErrText = errTexts.password[1]\n                        setEmailError(state, 0)\n                    }\n\n                    return\n                }\n                \n                state.email = ''\n                state.password = ''\n                state.emailErr = false\n                state.passwordErr = false\n                state.showPassword = false\n            })\n    },\n})\n\nexport const { changeField, showPass, setError, setLoading, } = formSlice.actions\n\nexport default formSlice","const validator = (email: string, pass: string): boolean[] => {\n    const emailRegExp = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n\n    const passRules = [/[a-z]/, /[0-9]/, /.{8,}/]\n    \n    const valid = [false, false]\n\n    if (emailRegExp.test(email)) {\n        valid[0] = true\n    }\n\n    if (passRules.every(rule => rule.test(pass))) {\n        valid[1] = true\n    }\n\n    return valid\n}\n\nexport default validator","import { FC } from 'react'\n\nimport ReactLoader from 'react-loader-spinner'\n\ninterface LoaderProps {\n    width: number,\n    height: number,\n    type?: 'TailSpin' | 'ThreeDots',\n}\n\nconst Loader: FC<LoaderProps> = ({ type, width, height, }) => {\n    return (\n        <ReactLoader\n            color='#00BFFF'\n            width={width}\n            height={height}\n            type={type || 'TailSpin'}\n        />\n    )\n}\n\nexport default Loader","import { ChangeEvent, FC, useCallback } from 'react'\n\nimport { Button, TextField, Checkbox, FormControlLabel } from '@material-ui/core'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { RootState } from '../../interfaces'\nimport { changeField, showPass, setError, setLoading, } from '../../redux/formSlice'\nimport { Link } from 'react-router-dom'\nimport validator from './validator'\nimport { sendData } from '../../redux/asyncReducers'\nimport Loader from '../Loader'\n\nimport './Form.scss'\n\ninterface FormProps {\n    signUp?: boolean,\n}\n\nconst Form: FC<FormProps> = ({ signUp, }) => {\n    const dispatch = useDispatch()\n    const { \n        email, password, showPassword,\n        emailErr, passwordErr, \n        emailErrText, passwordErrText, loading,\n    } = useSelector((state: RootState) => state.form)\n\n    const onChangeEmail = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        dispatch(changeField({ field: 'email', value: e.target.value, }))\n    }, [email])\n\n    const onChangePass = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        dispatch(changeField({ field: 'password', value: e.target.value, }))\n    }, [password])\n\n    const onChangeShowPass = useCallback(() => dispatch(showPass()), [showPassword])\n\n    const checker = useCallback((condition: boolean, field: 'emailErr' | 'passwordErr') => {\n        if (condition) {\n            dispatch(setError({ field, err: false, }))\n        } else {\n            dispatch(setError({ field, err: true, }))\n        }\n    }, [])\n\n    const submitForm = useCallback(e => {\n        e.preventDefault()\n\n        if (!signUp) {\n            dispatch(setLoading(true))\n            dispatch(sendData({ email, password, signUp, }))\n\n            return\n        }\n\n        const [validEmail, validPassword] = validator(email, password)\n\n        if (validEmail && validPassword) {\n            checker(validEmail, 'emailErr')\n            checker(validPassword, 'passwordErr')\n\n            dispatch(setLoading(true))\n            dispatch(sendData({ email, password, signUp, }))\n        } else {\n            checker(validEmail, 'emailErr')\n            checker(validPassword, 'passwordErr')\n        }\n    }, [email, password, signUp])\n\n    return (\n        <form className='login-form' onSubmit={submitForm}>\n            <div className='field-box'>\n                <TextField\n                    onChange={onChangeEmail}\n                    label='Email'\n                    variant='outlined'\n                    value={email}\n                    error={emailErr}\n                    helperText={emailErr ? emailErrText : ''}\n                ></TextField>\n                <TextField\n                    onChange={onChangePass}\n                    label='Password'\n                    variant='outlined'\n                    value={password}\n                    type={showPassword ? 'text' : 'password'}\n                    error={passwordErr}\n                    helperText={passwordErr ? passwordErrText : ''}\n                ></TextField>\n            </div>\n            <div className='checkbox'>\n                <FormControlLabel\n                    control={\n                        <Checkbox\n                            onChange={onChangeShowPass}\n                            color='primary'\n                            checked={showPassword}\n                        />\n                    }\n                    label='Show Password'\n                />\n            </div>\n            <Button\n                variant='contained'\n                color='primary'\n                type={loading ? 'button' : 'submit'}\n                className={(loading || !email || !password) ? 'disabled' : ''}\n            >\n                { loading ?\n                    <Loader width={50} height={50} /> :\n                    signUp ? 'Sign Up' : 'Sign In'\n                }\n            </Button>\n            <div className='question'>\n                { signUp ? 'Have you an account?' : 'Don\\'t have an account?' }\n                <Link to={signUp ? '/sign-in' : '/sign-up'}>\n                    { signUp ? 'Log In' : 'Create It' }\n                </Link>\n            </div>\n        </form>\n    )\n}\n\nexport default Form","import { createSlice } from '@reduxjs/toolkit'\nimport { checkWord, getUserData, sendData, SendDataPayload } from './asyncReducers'\n\nexport type alertTypes = 'error' | 'invite' | 'decline' | 'gameEnd'\n\nexport interface AppSliceState {\n    alert: boolean,\n    alertType: alertTypes,\n    isSignIn: boolean,\n    game: boolean,\n    forInvite?: string,\n    gameEndText?: string,\n}\n\nconst initialState: AppSliceState = {\n    alert: false,\n    alertType: 'error',\n    isSignIn: false,\n    game: false,\n}\n\ninterface SetAlertPayload {\n    payload: {\n        alert: boolean,\n        type?: alertTypes,\n        forInvite?: string,\n        gameEndText?: string,\n    },\n}\n\nconst onError = (state: AppSliceState) => {\n    state.alert = true\n    state.alertType = 'error'\n}\n\nconst appSlice = createSlice({\n    name: 'app',\n    initialState,\n    reducers: {\n        setAlert: (state, { payload }: SetAlertPayload) => {\n            state.alert = payload.alert\n\n            if (payload.type) {\n                state.alertType = payload.type\n            }\n\n            if (payload.forInvite) {\n                state.forInvite = payload.forInvite\n            }\n\n            if (payload.gameEndText) {\n                state.gameEndText = payload.gameEndText\n            }\n        },\n        setSignIn: (state, { payload }) => {\n            if (!payload) {\n                delete window.localStorage.token\n            }\n\n            state.isSignIn = payload\n        },\n        setGame: (state, { payload }) => {\n            state.game = payload\n        },\n    },\n    extraReducers: builder => {\n        builder\n            .addCase(sendData.rejected, state => {\n                onError(state)\n            }).addCase(sendData.fulfilled, (state, { payload }: SendDataPayload) => {\n                if (payload.error) {\n                    return\n                }\n                \n                if (payload.token) {\n                    window.localStorage.setItem('token', payload.token)\n                    state.isSignIn = true\n                }\n            }).addCase(getUserData.rejected, state => {\n                onError(state)\n            }).addCase(checkWord.rejected, state => {\n                onError(state)\n            })\n    },\n})\n\nexport const { setAlert, setSignIn, setGame, } = appSlice.actions\n\nexport default appSlice","import { FC, ReactNode } from 'react'\n\nimport Alert from '@material-ui/lab/Alert'\nimport { IconButton } from '@material-ui/core'\nimport CloseIcon from '@material-ui/icons/Close'\nimport { children } from '../../interfaces'\n\ninterface ErrorAlertProps {\n    hideAlert: () => void,\n    customText?: children,\n}\n\nconst ErrorAlert: FC<ErrorAlertProps> = ({ hideAlert, customText, }) => {\n    return (\n        <Alert\n            severity='error'\n            action={\n                <IconButton\n                    aria-label='close'\n                    color='inherit'\n                    size='small'\n                    onClick={hideAlert}\n                >\n                    <CloseIcon fontSize='inherit' />\n                </IconButton>\n            }\n        >\n            { customText || <>\n                <p>Ooops!</p>\n                <p>There is some problem with it.</p>\n                <p>Please, do according the instruction below:</p>\n                <ol>\n                    <li>Check your internet connection</li>\n                    <li>Reload the page</li>\n                </ol>\n                <p>If it won't help, report us about the problem.</p>\n            </>}\n        </Alert>\n    )\n}\n\nexport default ErrorAlert","import { FC } from 'react'\n\nimport Alert from '@material-ui/lab/Alert'\nimport { Button } from '@material-ui/core'\nimport { children } from '../../interfaces'\n\ninterface InviteAlertProps {\n    hideAlert: () => void,\n    children: children,\n    acceptFn: () => void,\n    declineFn?: () => void,\n    accept?: children,\n    decline?: children,\n    noChoice?: boolean,\n}\n\nconst InviteAlert: FC<InviteAlertProps> = ({\n    children, accept = 'Accept', decline = 'Decline',\n    acceptFn, declineFn, noChoice,\n}) => {\n    return (\n        <Alert severity='success'>\n            {children}\n            <div className='confirm-buttons'>\n                <Button\n                    onClick={acceptFn}\n                    variant='contained'\n                    color='primary'\n                >{accept}</Button>\n                {!noChoice &&\n                    <Button\n                        onClick={declineFn}\n                        variant='contained'\n                        color='secondary'\n                    >{decline}</Button>\n                }\n            </div>\n        </Alert>\n    )\n}\n\nexport default InviteAlert","import _ from 'lodash'\nimport { v4 as uuidv4 } from 'uuid'\nimport { ISquare } from './'\n\nexport const INITIAL_WORD = 'balda'\n\nexport const fillSquares = () => {\n    return _.fill(Array(25), 0).map((i, index) => ({\n        id: uuidv4(), active: false, \n        letter: (index >= 10 && index <= 14) ? INITIAL_WORD.split('')[index - 10] : '',\n    }))\n}\n\nexport const findNeighbour = (arr: ISquare[], index: number) => {\n    return (arr[index + 1] && Boolean(arr[index + 1].letter)) || \n        (arr[index - 1] && Boolean(arr[index - 1].letter)) || \n        (arr[index + 5] && Boolean(arr[index + 5].letter)) || \n        (arr[index - 5] && Boolean(arr[index - 5].letter))\n}\n\nexport const isNeighbourLastLetter = (index: number, last: number | null) => {\n    if (!last) {\n        return true\n    }\n\n    return index + 1 === last || \n        index - 1 === last ||\n        index + 5 === last ||\n        index - 5 === last ||\n        index === last\n}\n\nexport const getById = (arr: ISquare[], argId: string) => arr.findIndex(({ id }) => id === argId)","import { createSlice } from '@reduxjs/toolkit'\nimport { checkWord } from '../asyncReducers'\nimport { \n    isNeighbourLastLetter, fillSquares, \n    findNeighbour, getById\n} from './utils'\n\nexport interface ISquare {\n    readonly id: string,\n    active: boolean,\n    letter: string,\n}\n\nexport interface GameSliceState {\n    dropStatistic: boolean,\n    squares: ISquare[],\n    myTurn: boolean,\n    players: [string, string] | [],\n    isGameEnd: boolean,\n    lastStep: number | null,\n    currentWord: string,\n    itemWithLastLetter: number | null,\n    selectedItems: number[],\n    activeButton: boolean,\n    currentActive?: number | null,\n    errorText?: string,\n}\n\nconst initialState: GameSliceState = {\n    dropStatistic: false,\n    squares: fillSquares(),\n    myTurn: true,\n    players: [],\n    isGameEnd: false,\n    lastStep: null,\n    currentWord: '',\n    itemWithLastLetter: null,\n    selectedItems: [],\n    activeButton: false,\n}\n\nconst reset = (state: GameSliceState) => {\n    state.currentWord = ''\n    state.selectedItems.forEach(i => state.squares[i].active = false)\n    state.itemWithLastLetter = null\n    state.selectedItems = []\n    state.activeButton = false\n    state.currentActive = null\n}\n\nconst checkGameEnd = (state: GameSliceState) => {\n    if (state.squares.every(({ letter }) => letter)) {\n        state.isGameEnd = true\n    }\n}\n\nconst removeLastLetter = (state: GameSliceState) => {\n    if (state.lastStep || state.lastStep === 0) {\n        state.squares[state.lastStep].letter = ''\n        state.lastStep = null\n    }\n}\n\nconst gameSlice = createSlice({\n    name: 'game',\n    initialState,\n    reducers: {\n        setDrop: state => {\n            state.dropStatistic = !state.dropStatistic\n        },\n        setActive: (state, { payload }) => {\n            if (!state.myTurn) {\n                if (!state.errorText) {\n                    state.errorText = 'It is not your turn'\n                }\n\n                return\n            }\n\n            if (state.errorText) {\n                state.errorText = ''\n            }\n\n            const index = getById(state.squares, payload)\n\n            if (!findNeighbour(state.squares, index) || !state.myTurn) {\n                return\n            }\n\n            if (state.lastStep || state.lastStep === 0) {\n                if (\n                    state.squares[index].letter && \n                    isNeighbourLastLetter(index, state.itemWithLastLetter)\n                ) {\n                    state.squares[index].active = !state.squares[index].active\n                    \n                    if (state.squares[index].active) {\n                        state.currentWord += state.squares[index].letter\n                        state.itemWithLastLetter = index\n                        state.selectedItems.push(index)\n                    } else {\n                        const { length } = state.selectedItems\n                        state.currentWord = state.currentWord.slice(0, -1)\n                        state.itemWithLastLetter = length > 1 ? state.selectedItems[length - 1] : null\n                        state.selectedItems.pop()\n                    }\n\n                    if (index === state.lastStep) {\n                        state.currentActive = index\n                    }\n\n                    if (\n                        state.selectedItems.length >= 2 && \n                        state.selectedItems.indexOf(state.lastStep) > -1 &&\n                        state.currentWord\n                    ) {\n                        state.activeButton = true\n                    } else {\n                        state.activeButton = false\n                    }\n\n                    return\n                } \n\n                if (state.currentWord) {\n                    return\n                }\n            }\n\n            if (state.squares[index].letter && index !== state.lastStep) {\n                return\n            }\n\n            state.squares[index].active = !state.squares[index].active\n            \n            if (state.currentActive || state.currentActive === 0) {\n                if (state.currentActive !== index) {\n                    state.squares[state.currentActive].active = false\n                }\n\n                if (!state.squares[state.currentActive].active && state.currentActive === index) {\n                    state.currentActive = null\n                    return\n                }\n\n                state.currentActive = index\n            } else {\n                state.currentActive = index\n            }\n        },\n        resetWord: state => {\n            reset(state)\n        },\n        setLetter: (state, { payload }) => {\n            if (state.currentActive || state.currentActive === 0) {\n                state.squares[state.currentActive].letter = payload\n                state.squares[state.currentActive].active = false\n                \n                if (!state.lastStep) {\n                    state.lastStep = state.currentActive\n                }\n\n                if (state.lastStep !== state.currentActive) {\n                    state.squares[state.lastStep].letter = ''\n                }\n\n                if (state.currentWord) {\n                    state.currentWord = ''\n                }\n\n                state.lastStep = state.currentActive\n                state.currentActive = null\n            }\n        },\n        setTurn: (state, { payload }) => {\n            state.myTurn = payload.turn\n\n            if (payload.letter) {\n                state.squares[payload.lastStep].letter = payload.letter\n            }\n\n            checkGameEnd(state)\n        },\n        setRepeatError: state => {\n            state.errorText = 'This word had already been'\n            \n            removeLastLetter(state)\n            reset(state)\n        },\n        setPlayers: (state, { payload }) => {\n            state.players = payload\n        },\n        killGame: state => {\n            reset(state)\n            state.squares = fillSquares()\n            state.selectedItems = []\n            state.players = []\n            state.isGameEnd = false\n        },\n    },\n    extraReducers: builder => {\n        builder.addCase(checkWord.fulfilled, (state, { payload }) => {\n            if (!payload) {\n                reset(state)\n                removeLastLetter(state)\n\n                state.errorText = 'There is no such word'\n            } else {\n                reset(state)\n                state.myTurn = false\n                state.lastStep = null\n\n                checkGameEnd(state)\n            }\n        })\n    },\n})\n\nexport const { \n    setDrop, setActive, setLetter, \n    setTurn, resetWord, setRepeatError, \n    setPlayers, killGame,\n} = gameSlice.actions\n\nexport default gameSlice","import { createSlice } from '@reduxjs/toolkit'\n\nexport interface OnlineUsersSliceState {\n    onlineUsers: string[],\n}\n\nconst initialState: OnlineUsersSliceState = {\n    onlineUsers: [],\n}\n\ninterface AddUserPayload {\n    payload: string | string[],\n}\n\nconst onlineUsersSlice = createSlice({\n    name: 'onlineUsers',\n    initialState,\n    reducers: {\n        addOnlineUser: (state, { payload }: AddUserPayload) => {\n            if (payload instanceof Array) {\n                state.onlineUsers = [...payload]\n            } else {\n                state.onlineUsers.push(payload)\n            }\n        },\n        removeOnlineUser: (state, { payload }) => {\n            state.onlineUsers.splice(state.onlineUsers.findIndex(email => email === payload), 1)\n        },\n    },\n})\n\nexport const { addOnlineUser, removeOnlineUser, } = onlineUsersSlice.actions\n\nexport default onlineUsersSlice","import { createSlice } from '@reduxjs/toolkit'\nimport { socket } from '../webSockets'\nimport { checkWord } from './asyncReducers'\n\nexport interface IWord {\n    word: string,\n    isMy?: boolean,\n}\n\nexport interface StatisticsSliceState {\n    score: {\n        my: number,\n        opponent: number,\n    },\n    words: IWord[],\n}\n\nconst initialState: StatisticsSliceState = {\n    score: {\n        my: 0,\n        opponent: 0,\n    },\n    words: [],\n}\n\ninterface SetScorePayload {\n    payload: {\n        player: 'my' | 'opponent',\n        word: string,\n    },\n}\n\nconst statisticsSlice = createSlice({\n    name: 'statistics',\n    initialState,\n    reducers: {\n        setStatictics: (state, { payload }: SetScorePayload) => {\n            state.score[payload.player] += payload.word.length\n            state.words.push({\n                word: payload.word,\n                isMy: payload.player === 'my',\n            })\n        },\n    },\n    extraReducers: builder => {\n        builder.addCase(checkWord.fulfilled, (state, { payload }) => {\n            if (payload) {\n                const { word, lastStep, letter, } = payload\n\n                state.score.my += word.length\n                state.words.push({\n                    word: word,\n                    isMy: true,\n                })\n\n                socket.emit('made-step', { word, lastStep, letter, })\n            }\n        })\n    },\n})\n\nexport const { setStatictics, } = statisticsSlice.actions\n\nexport default statisticsSlice","import { io } from 'socket.io-client'\nimport { store } from '..'\nimport { setAlert, setGame } from '../redux/appSlice'\nimport { setTurn, setPlayers } from '../redux/gameSlice'\nimport { addOnlineUser, removeOnlineUser } from '../redux/onlineUsersSlice'\nimport { setStatictics } from '../redux/statisticsSlice'\n\nexport const socket = io('http://localhost:8080')\n\nconst initializeSocket = () => {\n    socket.on('in-online', email => {\n        store.dispatch(addOnlineUser(email))\n    })\n\n    socket.on('out-online', email => {\n        store.dispatch(removeOnlineUser(email))\n    })\n\n    socket.on('invite', email => {\n        store.dispatch(setAlert({ alert: true, type: 'invite', forInvite: email, }))\n    })\n\n    socket.on('invite-declined', email => {\n        store.dispatch(setAlert({ alert: true, type: 'decline', forInvite: email, }))\n    })\n\n    socket.on('stop-invite', () => {\n        store.dispatch(setAlert({ alert: false, type: 'error', }))\n    })\n\n    socket.on('accepted-invite', room => {\n        socket.emit('join-room', room)\n    })\n\n    socket.on('start-game', ({ player1, player2, }) => {\n        store.dispatch(setGame(true))\n        store.dispatch(setPlayers([player1, player2]))\n    })\n\n    socket.on('set-turn', () => {\n        store.dispatch(setTurn({ turn: false }))\n    })\n\n    socket.on('made-step', ({ word, lastStep, letter, }) => {\n        store.dispatch(setStatictics({ word, player: 'opponent', }))\n        store.dispatch(setTurn({ turn: true, lastStep, letter, }))\n    })\n}\n\nexport default initializeSocket","import { FC, useCallback, useEffect, useState } from 'react'\n\nimport { alertTypes, setAlert, setGame } from '../../redux/appSlice'\nimport { useDispatch, useSelector } from 'react-redux'\nimport ErrorAlert from './ErrorAlert'\nimport ConfirmAlert from './ConfirmAlert'\nimport { socket } from '../../webSockets'\nimport { RootState } from '../../interfaces'\nimport { killGame } from '../../redux/gameSlice'\n\nimport './Alert.scss'\n\ninterface AlertProps {\n    type: alertTypes,\n    email?: string,\n    gameEndText?: string,\n}\n\nconst AlertMessage: FC<AlertProps> = ({ type, email, gameEndText, }) => {\n    const [active, setActive] = useState<boolean>(false)\n    const dispatch = useDispatch()\n    const { email: declinerEmail, forInvite, } = useSelector((state: RootState) => {\n        return { ...state.home, ...state.app }\n    })\n\n    const hideAlert = useCallback(() => setActive(false), [])\n\n    const closeAlert = useCallback(() => {\n        if (!active) {\n            dispatch(setAlert({ alert: false, }))\n        }\n    }, [active])\n\n    const clickOutOfAlert = useCallback((e) => {\n        if (type === 'invite' || type === 'gameEnd') {\n            return\n        }\n\n        if (/alert-box-BALDA/.test((e.target as HTMLElement).className)) {\n            hideAlert()\n        }\n    }, [])\n\n    useEffect(() => setActive(true), [])\n\n    const onAcceptInvite = useCallback(() => {\n        socket.emit('accepted-invite', forInvite)\n        hideAlert()\n    }, [])\n\n    const onDeclineInvite = useCallback(() => {\n        socket.emit('decline-invite', declinerEmail)\n        hideAlert()\n    }, [])\n\n    const onKillGame = useCallback(() => {\n        dispatch(killGame())\n        dispatch(setGame(false))\n        hideAlert()\n    }, [])\n\n    const getContent = useCallback(() => {\n        switch (type) {\n            case 'error':\n                return <ErrorAlert hideAlert={hideAlert} />\n            case 'invite':\n                return (\n                    <ConfirmAlert \n                        hideAlert={hideAlert}\n                        acceptFn={onAcceptInvite}\n                        declineFn={onDeclineInvite}\n                    >\n                        <p>{email} are inviting you to play</p>\n                    </ConfirmAlert>\n                )\n            case 'decline':\n                return <ErrorAlert hideAlert={hideAlert} customText={\n                    `${email} are busy. Try it later!`\n                } />\n            case 'gameEnd': \n                return (\n                    <ConfirmAlert\n                        hideAlert={hideAlert}\n                        acceptFn={onKillGame}\n                        accept='Ok'\n                        noChoice\n                    >\n                        {gameEndText?.split(/\\n/).map(str => <p key={str}>{str}</p>)}\n                    </ConfirmAlert>\n                )\n        }\n    }, [type])\n\n    return (\n        <div\n            className={`alert-box alert-box-BALDA ${active ? 'active' : ''}`}\n            onTransitionEnd={closeAlert}\n            onClick={clickOutOfAlert}\n        >\n            <div className='alert'>\n                {getContent()}\n            </div>\n        </div>\n    )\n}\n\nexport default AlertMessage","import { createSlice } from '@reduxjs/toolkit'\nimport { getUserData, GetUserDataPayload } from './asyncReducers'\n\nexport interface HomeSliceState {\n    email: string,\n    loading: boolean,\n    token: string,\n}\n\nconst initialState: HomeSliceState = {\n    email: '',\n    loading: true,\n    token: '',\n}\n\nconst homeSlice = createSlice({\n    name: 'home',\n    initialState,\n    reducers: {\n        setLoading: (state, { payload }) => {\n            state.loading = payload\n        },\n        signOut: state => {\n            state.email = ''\n        }\n    },\n    extraReducers: builder => {\n        builder\n            .addCase(getUserData.fulfilled, (state, { payload }: GetUserDataPayload) => {\n                state.loading = false\n                state.email = payload.email\n                state.token = payload.token\n            })\n    },\n})\n\nexport const { setLoading, signOut, } = homeSlice.actions\n\nexport default homeSlice","import { FC, useCallback, useState } from 'react'\n\nimport { Button } from '@material-ui/core'\nimport { socket } from '../../../webSockets'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../../interfaces'\nimport Loader from '../../Loader'\n\ninterface UserProps {\n    email: string,\n}\n\nconst User: FC<UserProps> = ({ email, }) => {\n    const { email: receiver, } = useSelector((state: RootState) => state.home)\n    const [ wait, setWait ] = useState<boolean>(false)\n\n    socket.on('invite-declined', () => {\n        setWait(false)\n    })\n\n    const invite = useCallback(() => {\n        if (wait) {\n            socket.emit('stop-invite', email)\n            setWait(false)\n            return\n        }\n\n        setWait(true)\n        socket.emit('invite', { email, receiver, })\n    }, [wait])\n\n    return (\n        <li>\n            <div>\n                <div className='avatar'>\n                    <i className='fas fa-user'></i>\n                </div>\n                <span className='name'>{email}</span>\n            </div>\n            <Button\n                variant='contained'\n                color='primary'\n                onClick={invite}\n            >\n                { !wait ?\n                    <>\n                        <i className='fas fa-user-plus'></i>\n                        Invite in the game\n                    </> :\n                    <>\n                        <i className='fas fa-times'></i>\n                        Waiting\n                        <div className='waiting-loader'>\n                            <Loader width={20} height={20} type='ThreeDots' />\n                        </div>\n                    </>\n                }\n            </Button>\n        </li>\n    )\n}\n\nexport default User","import { FC } from 'react'\n\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../../interfaces'\n\nimport User from './User'\n\nimport './UserList.scss'\n\nconst UserList: FC = () => {\n    const { onlineUsers, } = useSelector((state: RootState) => state.onlineUsers)\n\n    return (\n        <div className='user-list'>\n            <h2>Users Online</h2>\n            { !onlineUsers.length ? \n                <div className='empty'>There are no users online.</div> :\n                <ul>\n                    { onlineUsers.map(email => (\n                        <User key={email} email={email} />\n                    )) }\n                </ul>\n            }\n        </div>\n    )\n}\n\nexport default UserList","import { FC, useEffect } from 'react'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Link,} from 'react-router-dom'\nimport { RootState } from '../../interfaces'\nimport { getUserData } from '../../redux/asyncReducers'\nimport { setLoading } from '../../redux/homeSlice'\nimport Loader from '../Loader'\nimport UserList from './UserList'\n\nimport './HomePage.scss'\n\nconst HomePage: FC = () => {\n    const dispatch = useDispatch()\n    const { loading, email, token, } = useSelector((state: RootState) => state.home)\n\n    useEffect(() => {\n        dispatch(setLoading(true))\n        dispatch(getUserData(token || window.localStorage.getItem('token') || ''))\n    }, [])\n    \n    return (\n        <div className={`home-page ${!loading ? 'not-center' : ''}`}>\n            { loading ?\n                <Loader width={100} height={100} /> :\n                <>\n                    <div className='link-box'>\n                        <Link to='/profile'>{email}</Link>\n                    </div>\n                    <UserList />\n                </>\n            }\n        </div>\n    )\n}\n\nexport default HomePage","import { FC, useCallback } from 'react'\n\nimport { Button } from '@material-ui/core'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { RootState } from '../../interfaces'\nimport { Link } from 'react-router-dom'\nimport { setSignIn } from '../../redux/appSlice'\nimport { signOut as removeUserData } from '../../redux/homeSlice'\nimport { socket } from '../../webSockets'\n\nimport './ProfilePage.scss'\n\nconst ProfilePage: FC = () => {\n    const dispatch = useDispatch()\n    const { email, } = useSelector((state: RootState) => state.home)\n\n    const signOut = useCallback(() => {\n        socket.emit('leave-user', email)\n        dispatch(setSignIn(false))\n        dispatch(removeUserData())\n    }, [])\n\n    return (\n        <div className='profile-page'>\n            <div className='user-data'>\n                {email}\n            </div>\n            <Link to='/'>Go Home</Link>\n            <Button\n                variant='contained'\n                color='primary'\n                onClick={signOut}\n            >Sign Out</Button>\n        </div>\n    )\n}\n\nexport default ProfilePage","import { FC, useCallback } from 'react'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { RootState } from '../../interfaces'\nimport { setDrop } from '../../redux/gameSlice'\nimport { IWord } from '../../redux/statisticsSlice'\n\ninterface StatisticsListProps {\n    words: IWord[],\n    my?: boolean,\n    right?: boolean,\n}\n\nconst StatisticsList: FC<StatisticsListProps> = ({ words, my, right, }) => (\n    <div>\n        <ul>\n            {words.filter(({ isMy, }) => my ? isMy : !isMy).map(({ word, }) => (\n                <li key={word}>\n                    <span className={right ? 'right' : ''}>{word}: {word.length}</span>\n                </li>\n            ))}\n        </ul>\n    </div>\n)\n\nconst Statistic: FC = () => {\n    const dispatch = useDispatch()\n    const { dropStatistic, score, words, players, email, } = useSelector((state: RootState) => (\n        { ...state.game, ...state.statistics, ...state.home, }\n    ))\n    const opponent = players[0] === email ? players[1] : players[0]\n\n    const dropDownStatistic = useCallback(() => dispatch(setDrop()), [])\n\n    return (\n        <div className='statistic'>\n            <div>\n                <span>You: {score.my}</span>\n                <span className='line'>|</span>\n                <span>{opponent}: {score.opponent}</span>\n                <button onClick={dropDownStatistic}>\n                    <i className={\n                        `fas fa-arrow-up ${dropStatistic ? 'rotate' : ''}`\n                    }></i>\n                </button>\n            </div>\n            <div className={`statistics ${dropStatistic ? 'active' : ''}`}>\n                <StatisticsList words={words} my />\n                <StatisticsList words={words} right />\n            </div>\n        </div>\n    )\n}\n\nexport default Statistic","import { FC, useCallback } from 'react'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { RootState } from '../../interfaces'\nimport { setActive } from '../../redux/gameSlice'\n\ninterface SquareProps {\n    readonly id: string,\n    active: boolean,\n    letter: string,\n}\n\nconst Square: FC<SquareProps> = ({ id, active, letter, }) => {\n    const dispatch = useDispatch()\n    const { myTurn, } = useSelector((state: RootState) => state.game)\n\n    const toggleActive = useCallback(() => dispatch(setActive(id)), [])\n\n    return (\n        <li\n            onClick={toggleActive}\n            className={`${active ? 'active' : ''} ${myTurn ? '' : 'not-hover'}`}\n        >{letter}</li>\n    )\n}\n\nexport default Square","import { FC } from 'react'\n\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../interfaces'\nimport Square from './Square'\n\nconst Field: FC = () => {\n    const { squares, } = useSelector((state: RootState) => state.game)\n\n    return (\n        <ul className='field'>\n            { squares.map(square => (\n                <Square key={square.id} {...square} />\n            ))}\n        </ul>\n    )\n}\n\nexport default Field","import { FC, useCallback } from 'react'\n\nimport { useDispatch } from 'react-redux'\nimport { setLetter } from '../../redux/gameSlice'\n\ninterface LetterProps {\n    letter: string,\n}\n\nconst Letter: FC<LetterProps> = ({ letter, }) => {\n    const dispatch = useDispatch()\n\n    const onClick = useCallback(() => {\n        dispatch(setLetter(letter))\n    }, [])\n\n    return (\n        <li \n            onClick={onClick}\n        >{letter}</li>\n    )\n}\n\nexport default Letter","import { FC, useCallback, useEffect } from 'react'\n\nimport Statistic from './Statistic'\nimport Field from './Field'\nimport Letter from './Letter'\nimport { Button } from '@material-ui/core'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { RootState } from '../../interfaces'\nimport { resetWord, setRepeatError } from '../../redux/gameSlice'\nimport { checkWord } from '../../redux/asyncReducers'\nimport { INITIAL_WORD } from '../../redux/gameSlice/utils'\n\nimport './Game.scss'\nimport { setAlert } from '../../redux/appSlice'\n\nconst getAlphabet = () => {\n    const alphabet = []\n\n    for (let i = 65; i <= 90; i++) {\n        alphabet.push(String.fromCodePoint(i))\n    }\n\n    return alphabet\n}\n\nconst Game: FC = () => {\n    const dispatch = useDispatch()\n    const { \n        lastStep, currentWord, activeButton, errorText, \n        squares, words, isGameEnd, score,\n    } = useSelector((state: RootState) => ({ ...state.game, ...state.statistics, }))\n\n    const reset = useCallback(() => dispatch(resetWord()), [])\n\n    const check = useCallback(() => {\n        const word = currentWord.toLowerCase()\n\n        if (words.map(({ word: w, }) => w.toLowerCase()).indexOf(word) > -1 || word === INITIAL_WORD) {\n            dispatch(setRepeatError())\n            return\n        }\n\n        if (activeButton) {\n            dispatch(checkWord({ \n                word: currentWord, \n                lastStep: lastStep || 0, \n                letter: squares[lastStep || 0].letter,\n            }))\n        }\n    }, [activeButton, currentWord, lastStep, words])\n\n    useEffect(() => {\n        const win = score.my > score.opponent\n        const draw = score.my === score.opponent\n\n        if (isGameEnd) {\n            dispatch(setAlert({ \n                alert: true, type: 'gameEnd', \n                gameEndText: `\n                    ${win ? 'You win :)' : (draw ? 'Draw!' : 'You lose :(')}\n                    You score: ${score.my}\n                    You opponent score: ${score.opponent}\n                    ${win ? 'Congratulations!' : 'You will do it in the next game!'}\n                `\n            }))\n        }\n    }, [isGameEnd, score])\n\n    return (\n        <div className='game'>\n            <Statistic />\n            <Field />\n            <div className='check'>\n                <span className={currentWord ? 'uppercase' : ''}>\n                    { lastStep ? (currentWord || 'Show word') : (errorText || 'Add Letter')}\n                    { currentWord && \n                        <button className='reset' onClick={reset}>\n                            <i className='fas fa-times'></i>\n                        </button> \n                    }\n                </span>\n                <Button\n                    variant='contained'\n                    color='primary'\n                    className={activeButton ? '' : 'disabled'}\n                    onClick={check}\n                >Check</Button>\n            </div>\n            <ul className='letters'>\n                {getAlphabet().map(letter => (\n                    <Letter key={letter} letter={letter} />\n                ))}\n            </ul>\n        </div>\n    )\n}\n\nexport default Game","import { FC, useEffect } from 'react'\n\nimport Form from './components/Form'\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom'\nimport Alert from './components/Alert'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { RootState } from './interfaces'\nimport HomePage from './components/HomePage'\nimport { setSignIn } from './redux/appSlice'\nimport ProfilePage from './components/ProfilePage'\nimport { socket } from './webSockets'\nimport Game from './components/Game'\n\nimport './App.scss'\n\nconst App: FC = () => {\n  const dispatch = useDispatch()\n  const {\n    alert, alertType, isSignIn,\n    forInvite, email, game, gameEndText,\n  } = useSelector((state: RootState) => (\n    { ...state.app, ...state.home,}\n  ))\n\n  useEffect(() => {\n    if (window.localStorage.getItem('token')) {\n      dispatch(setSignIn(true))\n    }\n  }, [])\n\n  useEffect(() => {\n    if (email) {\n      socket.emit('go-online', email)\n    }\n  }, [email])\n\n  return (\n    <BrowserRouter>\n      <div className='wrapper'>\n        {alert && \n          <Alert type={alertType} email={forInvite} gameEndText={gameEndText} />\n        }\n        <Switch>\n          <Route path='/' exact>\n            {!isSignIn ?\n              <Redirect to='/sign-in' /> :\n              (!game ? <HomePage /> : <Game />)\n            }\n          </Route>\n          <Route path='/sign-in'>\n            {isSignIn ? <Redirect to='/' exact /> : <Form />}\n          </Route>\n          <Route path='/sign-up'>\n            {isSignIn ? <Redirect to='/' exact /> : <Form signUp />}\n          </Route>\n          <Route path='/profile'>\n            {!isSignIn ?\n              <Redirect to='/sign-in' /> :\n              (!game ? <ProfilePage /> : <Game />)\n            }\n          </Route>\n        </Switch>\n      </div>\n    </BrowserRouter>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './App'\nimport { combineReducers, configureStore } from '@reduxjs/toolkit'\nimport formSlice from './redux/formSlice'\nimport { Provider } from 'react-redux'\nimport appSlice from './redux/appSlice'\nimport homeSlice from './redux/homeSlice'\nimport initializeSocket from './webSockets'\nimport onlineUsersSlice from './redux/onlineUsersSlice'\nimport gameSlice from './redux/gameSlice'\nimport statisticsSlice from './redux/statisticsSlice'\n\nexport const store = configureStore({\n  reducer: combineReducers({\n    form: formSlice.reducer,\n    app: appSlice.reducer,\n    home: homeSlice.reducer,\n    onlineUsers: onlineUsersSlice.reducer,\n    game: gameSlice.reducer,\n    statistics: statisticsSlice.reducer,\n  }),\n})\n\ninitializeSocket()\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}